#!/usr/bin/env python
from argh import *
import cjdns
import time
import dht


def install():
    'install yrd and cjdns on your box'
    pass


def addr():
    'show infos about your node'
    c = cjdns.connect()
    res = c.lookup()['result']

    print('addr\t\t' + res['bestParent']['ip'])
    print('key\t\t' + res['key'])
    print('version\t\tv' + str(res['protocolVersion']))
    print('links\t\t' + str(res['linkCount']))

    c.disconnect()


@arg('ip', help='the cjdns ipv6')
@arg('-c', '--count', metavar='count', help='stop after `count` packets')
@arg('-s', '--switch', help='do a switch ping instead of a router ping')
@wrap_errors([KeyboardInterrupt])
def ping(ip, count=0, switch=False):
    'ping a node'
    c = cjdns.connect()
    ping = c.switchPing if switch else c.routerPing

    x = 0
    while True:
        # doesn't work yet
        resp = ping(ip)

        l = str(int(time.time()))

        if 'error' in resp and resp['error'] == 'not_found':
            l += ' No route to host'

        print(l)

        time.sleep(1)

        x += 1
        if x == count:
            break

    c.disconnect()


def traceroute():
    'traceroute a node'
    pass


@arg('--follow', help='show new nodes while they\'re discovered')
def ns(follow=False):
    'access the nodestore'
    pass


@named('show')
def peers_show():
    'show your peers'
    c = cjdns.connect()
    STAT_FORMAT = '%s\t%s\tv%d\tin %d\tout %d\t%s\tdup %d los %d oor %d'

    for peer in c.getPeers():
        version = c.lookup(peer.ip)['result']['protocolVersion']
        setattr(peer, 'version', version)

        line = STAT_FORMAT % (peer.ip, peer.switchLabel, peer.version,
                              peer.bytesIn, peer.bytesOut, peer.state,
                              peer.duplicates, peer.lostPackets,
                              peer.receivedOutOfRange)

        if hasattr(peer, 'user'):
            line += ' %r' % peer.user

        print(line)

    c.disconnect()


@named('auth')
def peers_auth():
    'add a password for inbound connections'
    pass


@named('add')
def peers_add():
    'add an outbound connection'
    pass


@named('remove')
def peers_remove():
    'unpeer a node'
    pass


@named('peer')
def dht_peer():
    'connect to public peers'
    pass


@named('announce')
def dht_announce():
    'announce yourself as public peer'
    pass


parser = ArghParser()
parser.add_commands([install, addr, ping, traceroute, ns])
parser.add_commands([peers_show, peers_auth, peers_add, peers_remove],
                    namespace='peers', title='ctrl peers')
parser.add_commands([dht_peer, dht_announce],
                    namespace='dht', title='ctrl inet auto-peering')

if __name__ == '__main__':
    dispatch(parser)
