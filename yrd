#!/usr/bin/env python
from subprocess import call, Popen, PIPE
from argh import *
import itertools
import cjdns
import json
import time
import dht
import os

CJDNS_GIT_REPO = 'https://github.com/cjdelisle/cjdns.git'
CJDNS_CLONE_DIR = '/opt/cjdns'

YRD_GIT_REPO = 'https://github.com/kpcyrd/yrd.git'
YRD_CLONE_DIR = '/opt/yrd'
YRD_FOLDER = '/var/lib/yrd'
YRD_PEERS = '/var/lib/yrd/peers.d'
CJDROUTE_CONF = '/var/lib/yrd/cjdroute.conf'


def install():
    'install yrd and cjdns on your box'

    yield '[*] checking permissions'
    if os.geteuid():
        yield '[-] you need to be root'
        return

    yield '[*] checking if git is there'
    if call(['which', 'git']):
        yield '[-] please install git'
        return

    yield '[*] checking if cjdroute is there'
    if call(['which', 'cjdroute']):
        yield '[/] not found, continuing'

        yield '[*] cloning cjdns'
        if call(['git', 'clone', CJDNS_GIT_REPO, CJDNS_CLONE_DIR]):
            yield '[-] clone failed'
            return

        yield '[*] compiling cjdns'
        if call(['sh', '-c', 'cd "%s" && ./do' % CJDNS_CLONE_DIR]):
            yield '[-] compile failed'

        yield '[*] creating symlink'
        os.symlink(os.path.join(CJDNS_CLONE_DIR, 'cjdroute'),
                   '/usr/bin/cjdroute')
    else:
        yield '[+] already installed, skipping'

    yield '[*] checking if yrd is in your path'
    if call(['which', 'yrd']):
        yield '[/] not in your path, doing a proper install from scratch'
        yield '[*] cloning yrd'
        if call(['git', 'clone', YRD_GIT_REPO, YRD_CLONE_DIR]):
            yield '[-] clone failed'
            return

        yield '[*] creating symlink'
        os.symlink(os.path.join(YRD_CLONE_DIR, 'yrd'),
                   '/usr/bin/yrd')
    else:
        yield '[+] already installed, skipping'

    yield '[*] checking folders for internal files'
    for folder in [YRD_FOLDER, YRD_PEERS]:
        if not os.path.exists(folder):
            yield '[*] creating ' + folder
            os.mkdir(folder, 0700)

    yield '[+] installation complete'


@wrap_errors([KeyboardInterrupt])
def start():
    with open(CJDROUTE_CONF) as f:
        conf = f.read()

    p = Popen(['cjdroute'], stdin=PIPE)
    p.communicate(conf)

    conf = json.loads(conf)

    c = cjdns.connect(password=conf['admin']['password'])

    for peer in os.listdir(YRD_PEERS):
        with open(os.path.join(YRD_PEERS, peer)) as f:
            info = json.load(f)
            if info['type'] == 'in':
                c.addPassword(info['name'], info['password'])

    c.disconnect()


def addr():
    'show infos about your node'
    c = cjdns.connect()
    res = c.lookup()['result']

    print('addr\t\t' + res['bestParent']['ip'])
    print('key\t\t' + res['key'])
    print('version\t\tv' + str(res['protocolVersion']))
    print('links\t\t' + str(res['linkCount']))

    c.disconnect()


@arg('ip', help='the cjdns ipv6')
@arg('-c', '--count', metavar='count', help='stop after `count` packets')
@arg('-s', '--switch', help='do a switch ping instead of a router ping')
@wrap_errors([KeyboardInterrupt])
def ping(ip, count=0, switch=False):
    'ping a node'
    c = cjdns.connect()
    ping = c.switchPing if switch else c.routerPing

    for _ in xrange(count) if count else itertools.repeat(None):
        # doesn't work yet
        resp = ping(ip)

        l = str(int(time.time()))

        if 'error' in resp and resp['error'] == 'not_found':
            l += ' No route to host'

        print(l)

        time.sleep(1)

    c.disconnect()


def traceroute():
    'traceroute a node'
    pass


@arg('--follow', help='show new nodes while they\'re discovered')
def ns(follow=False):
    'access the nodestore'
    pass


@aliases('neighbours')
def n():
    'shows your neighbours'
    c = cjdns.connect()
    STAT_FORMAT = '%s %19s  v%d  %7d %7d  %12s  %d/%d/%d  '

    for peer in c.getPeers():
        result = c.lookup(peer.ip)['result']
        route = [x for x in c.dumpTable() if x['ip'] == peer.ip]
        setattr(peer, 'version', result['protocolVersion'])
        setattr(peer, 'path', route[0]['path'] if route else 'NO ROUTE TO HOST')

        line = STAT_FORMAT % (peer.ip, peer.path, peer.version,
                              peer.bytesIn, peer.bytesOut, peer.state,
                              peer.duplicates, peer.lostPackets,
                              peer.receivedOutOfRange)

        if hasattr(peer, 'user'):
            line += repr(peer.user)

        print(line)

    c.disconnect()


def generate_key(length):
    key = ''
    with open('/dev/urandom') as f:
        while len(key) < length:
            x = f.read(1)
            if x.isalnum():
                key += x
    return key


def get_ip():
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('1.2.3.4', 0))
    return s.getsockname()[0]


@named('auth')
def peer_auth(name):
    'add a password for inbound connections'

    if '/' in name:
        yield 'nope'
        exit(1)

    path = os.path.join(YRD_PEERS, name)
    if os.path.exists(path):
        with open(path) as f:
            password = json.load(f)['password']
    else:
        password = generate_key(31)

        info = {
            'type': 'in',
            'name': name,
            'password': password
        }

        with open(path, 'w') as f:
            f.write(json.dumps(info))

    with open(CJDROUTE_CONF) as f:
        conf = json.load(f)

    c = cjdns.connect(password=conf['admin']['password'])
    c.addPassword(name, password)
    c.disconnect()

    publicKey = conf['publicKey']
    port = conf['interfaces']['UDPInterface'][0]['bind'].split(':')[1]

    cred = {
        get_ip() + ':' + port: {
            'password': password,
            'publicKey': publicKey
        }
    }

    print(json.dumps(cred)[1:-1])


@named('add')
def peer_add():
    'add an outbound connection'
    pass


@named('remove')
def peer_remove():
    'unpeer a node'
    pass


@named('peer')
def dht_peer():
    'connect to public peers'
    pass


@named('announce')
def dht_announce():
    'announce yourself as public peer'
    pass


parser = ArghParser()
parser.add_commands([install, start, addr, n, ping, traceroute, ns])
parser.add_commands([peer_auth, peer_add, peer_remove],
                    namespace='peer', title='ctrl peers')
parser.add_commands([dht_peer, dht_announce],
                    namespace='dht', title='ctrl inet auto-peering')

if __name__ == '__main__':
    dispatch(parser)
